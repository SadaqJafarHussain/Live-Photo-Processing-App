import "./chunk-G3PMV62Z.js";

// node_modules/@innovatrics/dot-face-auto-capture/events.mjs
var _ = {};
_.CONTINUE_DETECTION = "continue-detection", _.SWITCH_CAMERA = "switch-camera", _.TOGGLE_MIRROR = "toggle-mirror";
var D = _;
var T = {};
T.FIRST_FRAME = "first-frame", T.FIRST_VALID_FRAME = "first-valid-frame";
var h = T;
var O = {};
O.REQUEST_CAPTURE = "dot-custom-event:request-capture";
var i = O;
var R = ((t) => (t.CAMERA_PROPS_CHANGED = "document-auto-capture:camera-props-changed", t.CONTROL = "document-auto-capture:control", t.DETECTED_DOCUMENT_CHANGED = "document-auto-capture:detected-document-changed", t.DOCUMENT_DETECTION = "document-auto-capture:document-detection", t.INSTRUCTION_CHANGED = "document-auto-capture:instruction-changed", t.INSTRUCTION_ESCALATED = "document-auto-capture:instruction-escalated", t.STATE_CHANGED = "document-auto-capture:state-changed", t.VIDEO_ELEMENT_SIZE = "document-auto-capture:video-element-size", t))(R || {});
var A = ((t) => (t.CAMERA_PROPS_CHANGED = "face-auto-capture:camera-props-changed", t.CONTROL = "face-auto-capture:control", t.DETECTED_FACE_CHANGED = "face-auto-capture:detected-face-changed", t.FACE_DETECTION = "face-auto-capture:face-detection", t.INSTRUCTION_CHANGED = "face-auto-capture:instruction-changed", t.STATE_CHANGED = "face-auto-capture:state-changed", t.VIDEO_ELEMENT_SIZE = "face-auto-capture:video-element-size", t))(A || {});
var S = ((t) => (t.ANIMATION_END = "magnifeye-auto-capture:animation-end", t.STATUS_CHANGED = "magnifeye-auto-capture:status-changed", t))(S || {});
var I = ((t) => (t.INSTRUCTION_ESCALATED = "smile:instruction-escalated", t.STATUS_CHANGED = "smile-auto-capture:status-changed", t))(I || {});
var p = ((t) => (t.CAMERA_PROPS_CHANGED = "palm-capture:camera-props-changed", t.CONTROL = "palm-capture:control", t.DETECTED_PALM_CHANGED = "palm-capture:detected-palm-changed", t.INSTRUCTION_CHANGED = "palm-capture:instruction-changed", t.STATE_CHANGED = "palm-capture:state-changed", t.VIDEO_ELEMENT_SIZE = "palm-capture:video-element-size", t))(p || {});
var m = ((t) => (t.STATUS_CHANGED = "eye-gaze-auto-capture:status-changed", t))(m || {});
var N = (t, n) => {
  const a = {};
  a.detail = n, document.dispatchEvent(new CustomEvent(t, a));
};
var H = (t, n) => {
  const a = {};
  a.instruction = n, N(t, a);
};
function G(t) {
  const n = {};
  n.instruction = t;
  const a = n;
  N(i.REQUEST_CAPTURE, a);
}
var s = {};
s.FRONT = "user", s.REAR = "environment";
var l = s;
var u = {};
u.AUTO_CAPTURE = "AUTO_CAPTURE", u.WAIT_FOR_REQUEST = "WAIT_FOR_REQUEST";
var g = u;
var c = {};
c.LOADING = "LOADING", c.ERROR = "ERROR", c.WAITING = "WAITING", c.RUNNING = "RUNNING";
var P = c;
var C = {};
C.EYE_NOT_PRESENT = "eye_not_present";
var r = C;
var e = {};
e.CANDIDATE_SELECTION = "candidate_selection", e.FACE_TOO_CLOSE = "face_too_close", e.FACE_TOO_FAR = "face_too_far", e.FACE_CENTERING = "face_centering", e.FACE_NOT_PRESENT = "face_not_present", e.SHARPNESS_TOO_LOW = "sharpness_too_low", e.BRIGHTNESS_TOO_LOW = "brightness_too_low", e.BRIGHTNESS_TOO_HIGH = "brightness_too_high", e.DEVICE_PITCHED = "device_pitched", e.LEFT_EYE_NOT_PRESENT = "left_" + r.EYE_NOT_PRESENT, e.RIGHT_EYE_NOT_PRESENT = "right_" + r.EYE_NOT_PRESENT, e.MOUTH_NOT_PRESENT = "mouth_not_present", e.MOUTH_SCORE_TOO_HIGH = "mouth_score_too_high", e.MOUTH_SCORE_TOO_LOW = "mouth_score_too_low";
var o = e;
var E = {};
E.isPresent = o.FACE_NOT_PRESENT, E.isNotPitched = o.DEVICE_PITCHED, E.isNotSmall = o.FACE_TOO_FAR, E.isNotLarge = o.FACE_TOO_CLOSE, E.isNotOutOfBounds = o.FACE_CENTERING, E.isNotDim = o.BRIGHTNESS_TOO_LOW, E.isNotBright = o.BRIGHTNESS_TOO_HIGH, E.isSharp = o.SHARPNESS_TOO_LOW, E.isLeftEyePresent = o.LEFT_EYE_NOT_PRESENT, E.isRightEyePresent = o.RIGHT_EYE_NOT_PRESENT, E.isMouthPresent = o.MOUTH_NOT_PRESENT, E.isMouthScoreNotTooHigh = o.MOUTH_SCORE_TOO_HIGH, E.isMouthScoreNotTooLow = o.MOUTH_SCORE_TOO_LOW;
var U = E;
export {
  P as AppStateValues,
  g as CaptureMode,
  i as ComponentCustomEvent,
  D as ControlEventInstruction,
  U as FaceCheckToInstructionCodeMap,
  A as FaceCustomEvent,
  o as FaceInstructionCodeValues,
  l as FacingMode,
  h as RequestCaptureInstruction,
  G as dispatchCaptureEvent,
  H as dispatchControlEvent
};
//# sourceMappingURL=@innovatrics_dot-face-auto-capture_events.js.map
